 /* 
 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve? Una variable son datos guardados en memoria. 
¬øCu√°l es la diferencia entre declarar e inicializar una variable? Declarar una variable solamente implica darle nombre y reservar el espacio en la memoria para esta. Inicializar la variable implica declararla y tambi√©n asignarle un valor. Ejemplo: Declarar : let resultado 
           inicializar : let resultado = 8
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings? 
	Aunque utilizamos el mismo s√≠mbolo ‚Äú+‚Äù, la suma realiza una operaci√≥n matem√°tica con dos n√∫meros y la concatenaci√≥n une los strings
¬øCu√°l operador me permite sumar o concatenar?
+

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre - String
Apellido - String
Nombre de usuario en Platzi - String
Edad - Number
Correo electr√≥nico - String
Mayor de edad - Boolean
Dinero ahorrado - Number
Deudas - Number

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

let nombre = "Sarah"
let apellido = "Pe√±a"
let nombreUsuario = "sarah.pena"
let edad = 28
let correo = "sarahpenavasquez@gmail.com"
let esMayorDeEdad = yes
let dineroAhorrado = 0
let deudas = 3000000
 
4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)

console.log (`${nombre} ${apellido}`)
console.log (dineroAhorrado - deudas)

Funciones
1Ô∏è‚É£  Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n? Es una expresi√≥n encapsulada reutilizable que se guarda en memoria para representar procesos que se repite a lo largo de nuestro c√≥digo
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo? Cuando debo repetir un proceso. Varialbes y bloques de c√≥digo repetidos. repetidos, parecidos, cuando el c√≥digo es muy largo. Sirve para ordenar y mejorar la legibilidad del c√≥digo
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n? El parametro son las variables que defino previamente en la declaraci√≥n de la funci√≥n. El argumento es la variable espec√≠fica que le paso a la funci√≥n cuando la mando a llamar.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");



Respuesta 

function mostrarNombre (completeName, nickname) {
    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
}

mostrarNombre ("Sarah Pe√±a V√°squez", "sarah.pena");

CONDICIONALES
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional? Es una instrucci√≥n que se ejecuta solo si se cumple una condici√≥n.
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias? If (else, elseif): permite hacer validaciones totalmente distints. En el Switch todos los casos se comparan con la misma variable o condici√≥n. Switch se utiliza si hay varios casos conocidos que se pueden definir.
¬øPuedo combinar funciones y condicionales? Si. 

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

let tipoDeSuscripcion = "Basic";

if (tipoDeSuscripcion == "Free") {
    console.log("Solo puedes tomar los cursos gratis");
} else if  (tipoDeSuscripcion == "Basic") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if  (tipoDeSuscripcion == "Expert") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if  (tipoDeSuscripcion == "ExpertPlus") {
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}

const tiposDeSuscripciones = {
    free: 'Solo puedes tomar los cursos gratis',
    basic: 'Puedes tomar casi todos los cursos de Platzi durante un mes',
    expert: 'Puedes tomar casi todos los cursos de Platzi durante un a√±o',
    expertduo: 'T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o',
};

function conseguirTipoSuscripcion(suscripcion) {
    if (tiposDeSuscripciones[suscripcion]) {
        console.log(tiposDeSuscripciones[suscripcion]);
        return;
    }

    console.warn('Ese tipo de suscripci√≥n no existe')
}
```

CICLOS
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo? Una secuencia de acciones que se repiten hasta que se cumpla cierta condici√≥n.
¬øQu√© tipos de ciclos existen en JavaScript? For, for of, while, do While
¬øQu√© es un ciclo infinito y por qu√© es un problema? Es la repeticion de la secuencia de acciones de manera infinita sin definir en qu√© momento se termina. Es un problema porque detiene el flujo de trabajo del c√≥digo
¬øPuedo mezclar ciclos y condicionales? Yes, it is possible

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 0
while(i < 5) {
    console.log("El valor de i es: " + i);
    i++ ;
}

let i = 10
while(i >= 2) {
    console.log("El valor de i es: " + i);
    i-- ;
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

do {
    let respuesta = prompt("cu√°nto es 2 + 2"); 
} while (respuesta != 4);


LISTAS

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array? Un conjunto de datos agrupados en una variable
¬øQu√© es un objeto? Un conjunto de datos agrupados en una variable con caracter√≠sticas y palabras clave para acceder a ellos. 
¬øCu√°ndo es mejor usar objetos o arrays? Arrays cuando lo que haremos en un elemento es lo mismo que en los dem√°s, mientras que un objeto es mejor cuando los nombres de cada elemento son importantes.
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays? Se puede tener un array con varios objetos. Los arrays pueden guadar objetos y los objetos pueden guarfar arrays en sus propiedades

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

function mostrarPrimerElemento (array) {
    console.log (array[0]);    
}

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

function mostrarElementos (elementos) {
    for (const elemento of elementos){
        console.log (elemento);
    }
}


4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

let object = {a: 1, b: 2, c: 3};

for (const property in object) {
    console.log (object [property]);
}



*/







 




















